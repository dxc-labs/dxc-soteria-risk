AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: API

Parameters:  
  StackName:
    Type: String
  EndpointName:
    Type: String
  ApiDomainName:
    Type: String 

Resources:

  ApiGatewayLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:  
              Service:
                - apigateway.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ApiGatewayLambdaPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !GetAtt RiskProfileEngineLambda.Arn

  RiskProfileEngineLambda:
    Type: AWS::Serverless::Function
    Properties:
      Description: Get Risk Category
      FunctionName: !Sub "${StackName}-lambda"
      Handler: lambda_function.lambda_handler
      Runtime: python3.8
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      MemorySize: 128
      CodeUri: ../packages/riskengine
      Environment:
        Variables:
          RISK_CLASSIFICATION_ENDPOINT: !Ref EndpointName

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:  
              Service: 
                - sagemaker.amazonaws.com 
                - lambda.amazonaws.com          
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ApiGatewayLambdaPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sagemaker:InvokeEndpoint                                                  
                Resource: !Join
                  - ""
                  - - "arn:aws:sagemaker:"
                    - !Sub "${AWS::Region}:${AWS::AccountId}:endpoint/"
                    - !Ref EndpointName
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
 
  ApiGatewayRestApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: !Sub "${StackName}-api"
      Description: !Sub "Risk Classification API"
      EndpointConfiguration:
        Types:
          - EDGE
      Policy: ''      
  ApiGatewayResourceRiskCategory:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt 
        - ApiGatewayRestApi
        - RootResourceId
      PathPart: !Sub "classification"
      RestApiId: !Ref ApiGatewayRestApi
  
  ApiGatewayMethodPostRiskCategory:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      HttpMethod: POST
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceRiskCategory
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: true
      AuthorizationType: NONE
      Integration:        
        IntegrationHttpMethod: POST
        Type: AWS                       
        IntegrationResponses:
          - StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''                              
        Credentials:
          Fn::Sub: '${ApiGatewayLambdaRole.Arn}'
        Uri: !Join 
          - ''
          - - 'arn:'
            - !Ref 'AWS::Partition'
            - ':apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt 
              - RiskProfileEngineLambda
              - Arn
            - /invocations
      MethodResponses:
        - StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: '''*'''
          ResponseModels: {}      
            
  ApiGatewayDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      StageName: !Select [2, !Split ['-', !Ref AWS::StackName]]
    DependsOn:      
      - ApiGatewayMethodPostRiskCategory 

  ApiKey:
    Type: 'AWS::ApiGateway::ApiKey'
    DependsOn:
      - ApiGatewayDeployment      
    Properties:
      Name: !Sub "${StackName}-apikey"
      Description: Risk Classification API Key
      Enabled: 'true'
      StageKeys:
        - RestApiId: !Ref ApiGatewayRestApi
          StageName: !Select [2, !Split ['-', !Ref AWS::StackName]]
  
  usagePlan:
    Type: 'AWS::ApiGateway::UsagePlan'
    DependsOn:
      - ApiGatewayDeployment
    Properties:
      ApiStages:
        - ApiId: !Ref ApiGatewayRestApi
          Stage: !Select [2, !Split ['-', !Ref AWS::StackName]]
      Description: Risk Classification usage plan
      Quota:
        Limit: 50000
        Period: DAY
      Throttle:
        BurstLimit: 200
        RateLimit: 100
      UsagePlanName: !Sub "${StackName}-usageplan"

  usagePlanKey:
    Type: 'AWS::ApiGateway::UsagePlanKey'
    DependsOn:
      - ApiGatewayDeployment
    Properties:
      KeyId: !Ref ApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref usagePlan
  
  ApiGatewayBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      BasePath: !Select [3, !Split ['-', !Ref AWS::StackName]]
      DomainName: !Sub "${ApiDomainName}"
      RestApiId: !Ref ApiGatewayRestApi
      Stage: !Select [2, !Split ['-', !Ref AWS::StackName]]
    DependsOn: ApiGatewayDeployment
        
Outputs:  
  
  ApiEndpoint:
    Description: URL of the service endpoint
    Value: !Join 
      - ''
      - - 'https://'
        - !Ref ApiGatewayRestApi
        - .execute-api.
        - !Ref 'AWS::Region'
        - .
        - !Ref 'AWS::URLSuffix'
        - /
        - !Select [2, !Split ['-', !Ref AWS::StackName]]
